package codegen

import "os"

type DocstoreRepositoryBoilerplate struct {
	AggregateName string
	ImportPath    string
	SourcePackage string
}

func (repo DocstoreRepositoryBoilerplate) Generate(filename string) {
	var data struct {
		PackageName string
		DocstoreRepositoryBoilerplate
	}
	data.PackageName = os.Getenv("GOPACKAGE")
	data.DocstoreRepositoryBoilerplate = repo
	render(_DocstoreRepositoryTemplate, filename, data)
}

var _DocstoreRepositoryTemplate = parse(_DocstoreRepositoryTemplateRaw)

const _DocstoreRepositoryTemplateRaw = `
// Code generated by upstep/codegen; DO NOT EDIT.

package {{.PackageName}}

import (
	"context"

	"gocloud.dev/docstore"

	"{{.ImportPath}}"
)

type {{.AggregateName}}Repository struct {
	coll *docstore.Collection
}

func New{{.AggregateName}}Repository(coll *docstore.Collection) *{{.AggregateName}}Repository {
	return &{{.AggregateName}}Repository{coll}
}

var _ {{.SourcePackage}}.{{.AggregateName}}Repository = new({{.AggregateName}}Repository)

func (repo *{{.AggregateName}}Repository) Get(ctx context.Context, id {{.SourcePackage}}.{{.AggregateName}}ID) (*{{.SourcePackage}}.{{.AggregateName}}, error) {
	rawID := id.Value()
	doc := _{{.AggregateName}}Doc{ID: rawID}

	err := repo.coll.Get(ctx, &doc)
	if err != nil {
		return nil, translateGetError(err)
	}

	return doc.ToDomain(repo.coll)
}

func (repo *{{.AggregateName}}Repository) Save(ctx context.Context, step *{{.SourcePackage}}.{{.AggregateName}}) error {
	doc := &_{{.AggregateName}}Doc{}
	err := doc.FromDomain(step, repo.coll)
	if err != nil {
		return translateSaveError(err)
	}

	err = repo.coll.Put(ctx, doc)
	return translateSaveError(err)
}
`
