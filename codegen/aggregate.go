package codegen

import (
	"log"
	"os"
)

func GenerateAggregateBoilerplate(filename, name string) {
	err := os.Remove(filename)
	if err != nil && !os.IsNotExist(err) {
		log.Panicf("problem removing old %q: %s", filename, err)
	}

	var data struct {
		PackageName   string
		AggregateName string
	}
	data.PackageName = os.Getenv("GOPACKAGE")
	data.AggregateName = name

	render(_AggregateTemplate, filename, data)
}

var _AggregateTemplate = parse(_AggregateTemplateRaw)

const _AggregateTemplateRaw = `
// Code generated by upstep/codegen; DO NOT EDIT.

package {{.PackageName}}

// ID is the unique ID of the {{.AggregateName}}.
func (agg *{{.AggregateName}}) ID() {{.AggregateName}}ID { return agg.id }

// Revision is the revision of the {{.AggregateName}}.
func (agg *{{.AggregateName}}) Revision() {{.AggregateName}}Revision { return agg.rev }

// SetRevision sets the {{.AggregateName}} revision.
func (agg *{{.AggregateName}}) SetRevision(rev {{.AggregateName}}Revision) {
	agg.rev = rev
}

// A {{.AggregateName}} identifies a {{.AggregateName}}.
type {{.AggregateName}}ID struct { value string }

// {{.AggregateName}}IDOf creates a {{.AggregateName}}ID from a raw string value.
func {{.AggregateName}}IDOf(value string) {{.AggregateName}}ID {
	return {{.AggregateName}}ID{value}
}

// Value is the raw string value of the {{.AggregateName}}ID.
func (id {{.AggregateName}}ID) Value() string { return id.value }

// A {{.AggregateName}}Revision is used to track versions of a {{.AggregateName}} stored in a repository.
// The persistence layer uses these to detect concurrent modifications.
type {{.AggregateName}}Revision struct { value string }

// Initial{{.AggregateName}}Revision returns the revision for a {{.AggregateName}} that was not persisted yet.
func Initial{{.AggregateName}}Revision() {{.AggregateName}}Revision {
	return {{.AggregateName}}Revision{}
}

// {{.AggregateName}}RevisionOf turns a string into a {{.AggregateName}} revision.
// It is used by the persistence code for concurrency control.
func {{.AggregateName}}RevisionOf(value string) {{.AggregateName}}Revision {
	return {{.AggregateName}}Revision{value}
}

// IsInitial returns true when the containing {{.AggregateName}} was not stored yet.
func (rev {{.AggregateName}}Revision) IsInitial() bool { return rev.value == "" }

// Value is the raw string value of the {{.AggregateName}} revision.
func (rev {{.AggregateName}}Revision) Value() string { return rev.value }
`
