// Code generated by upstep/codegen; DO NOT EDIT.

package planning

// ID is the unique ID of the Planner.
func (agg *Planner) ID() PlannerID { return agg.id }

// Revision is the revision of the Planner.
func (agg *Planner) Revision() PlannerRevision { return agg.rev }

// SetRevision sets the Planner revision.
func (agg *Planner) SetRevision(rev PlannerRevision) {
	agg.rev = rev
}

// A Planner identifies a Planner.
type PlannerID struct{ value string }

// PlannerIDOf creates a PlannerID from a raw string value.
func PlannerIDOf(value string) PlannerID {
	return PlannerID{value}
}

// Value is the raw string value of the PlannerID.
func (id PlannerID) Value() string { return id.value }

// A PlannerRevision is used to track versions of a Planner stored in a repository.
// The persistence layer uses these to detect concurrent modifications.
type PlannerRevision struct{ value string }

// InitialPlannerRevision returns the revision for a Planner that was not persisted yet.
func InitialPlannerRevision() PlannerRevision {
	return PlannerRevision{}
}

// PlannerRevisionOf turns a string into a Planner revision.
// It is used by the persistence code for concurrency control.
func PlannerRevisionOf(value string) PlannerRevision {
	return PlannerRevision{value}
}

// IsInitial returns true when the containing Planner was not stored yet.
func (rev PlannerRevision) IsInitial() bool { return rev.value == "" }

// Value is the raw string value of the Planner revision.
func (rev PlannerRevision) Value() string { return rev.value }
