// Code generated by upstep/codegen; DO NOT EDIT.

package planning

// ID is the unique ID of the Step.
func (agg *Step) ID() StepID { return agg.id }

// Revision is the revision of the Step.
func (agg *Step) Revision() StepRevision { return agg.rev }

// SetRevision sets the Step revision.
func (agg *Step) SetRevision(rev StepRevision) {
	agg.rev = rev
}

// A Step identifies a Step.
type StepID struct{ value string }

// StepIDOf creates a StepID from a raw string value.
func StepIDOf(value string) StepID {
	return StepID{value}
}

// Value is the raw string value of the StepID.
func (id StepID) Value() string { return id.value }

// A StepRevision is used to track versions of a Step stored in a repository.
// The persistence layer uses these to detect concurrent modifications.
type StepRevision struct{ value string }

// InitialStepRevision returns the revision for a Step that was not persisted yet.
func InitialStepRevision() StepRevision {
	return StepRevision{}
}

// StepRevisionOf turns a string into a Step revision.
// It is used by the persistence code for concurrency control.
func StepRevisionOf(value string) StepRevision {
	return StepRevision{value}
}

// IsInitial returns true when the containing Step was not stored yet.
func (rev StepRevision) IsInitial() bool { return rev.value == "" }

// Value is the raw string value of the Step revision.
func (rev StepRevision) Value() string { return rev.value }
